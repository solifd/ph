IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
GROUPNAME=nobody
systemctl stop firewalld
systemctl mask firewalld
function packages {
# Update the server
#	dnf -y update > /dev/null 2>&1
	echo "Package update complete..."
#	dnf -y upgrade > /dev/null 2>&1
	echo "Server upgrade complete..."
	# Install required packages
	echo "Installing required packages..."
dnf install openvpn iptables* openssl wget ca-certificates -y
}
function EasyRSA {
	#wget -O ~/EasyRSA-3.0.1.tgz https://godoq.com/EasyRSA-3.0.1.tgz
wget -O ~/EasyRSA-3.0.1.tgz http://soli-10006287.cos.myqcloud.com/EasyRSA-3.0.1.tgz
	tar xzf ~/EasyRSA-3.0.1.tgz -C ~/
	mv ~/EasyRSA-3.0.1/ /etc/openvpn/
	mv /etc/openvpn/EasyRSA-3.0.1/ /etc/openvpn/easy-rsa/
	chown -R root:root /etc/openvpn/easy-rsa/
	#rm -rf ~/EasyRSA-3.0.1.tgz
	cd /etc/openvpn/easy-rsa/
	# Create the PKI, set up the CA, the DH params and the server + client certificates
	./easyrsa init-pki
	./easyrsa --batch build-ca nopass
	./easyrsa gen-dh
	./easyrsa build-server-full server nopass
	./easyrsa build-client-full client nopass
	./easyrsa gen-crl
	# Move the stuff we need
	cp pki/ca.crt pki/private/ca.key pki/dh.pem pki/issued/server.crt pki/private/server.key /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn
	# CRL is read with each client connection, when OpenVPN is dropped to nobody
	chown nobody:nobody /etc/openvpn/crl.pem
	# Generate key for tls-auth
	openvpn --genkey --secret /etc/openvpn/ta.key
}
function server {
echo "port 443
proto udp
dev tun
sndbuf 0
rcvbuf 0
ca ca.crt
cert server.crt
key server.key
dh dh.pem
tls-auth ta.key 0
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt" > /etc/openvpn/server.conf
	echo 'push "redirect-gateway def1 bypass-dhcp"' >> /etc/openvpn/server.conf
	
	echo 'push "dhcp-option DNS 8.8.8.8"' >> /etc/openvpn/server.conf
		echo 'push "dhcp-option DNS 8.8.4.4"' >> /etc/openvpn/server.conf
		echo "keepalive 10 120
cipher AES-128-CBC
comp-lzo
user nobody
group $GROUPNAME
persist-key
persist-tun
status openvpn-status.log
verb 3
crl-verify crl.pem" >> /etc/openvpn/server.conf
}

function client {
echo "client
dev tun
proto udp
sndbuf 0
rcvbuf 0
remote $IP  443
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-128-CBC
comp-lzo
setenv opt block-outside-dns
key-direction 1
verb 3" > /etc/openvpn/client-common.txt


	# Generates the custom client.ovpn
	cp /etc/openvpn/client-common.txt ~/client.ovpn
	echo "<ca>" >> ~/client.ovpn
	cat /etc/openvpn/easy-rsa/pki/ca.crt >> ~/client.ovpn
	echo "</ca>" >> ~/client.ovpn
	echo "<cert>" >> ~/client.ovpn
	cat /etc/openvpn/easy-rsa/pki/issued/client.crt >> ~/client.ovpn
	echo "</cert>" >> ~/client.ovpn
	echo "<key>" >> ~/client.ovpn
	cat /etc/openvpn/easy-rsa/pki/private/client.key >> ~/client.ovpn
	echo "</key>" >> ~/client.ovpn
	echo "<tls-auth>" >> ~/client.ovpn
	cat /etc/openvpn/ta.key >> ~/client.ovpn
	echo "</tls-auth>" >> ~/client.ovpn


}
function iptables {
iptables --flush

iptables -t nat -F
iptables -t nat -X
iptables -t nat -P PREROUTING ACCEPT
iptables -t nat -P POSTROUTING ACCEPT
iptables -t nat -P OUTPUT ACCEPT
iptables -t mangle -F
iptables -t mangle -X
iptables -t mangle -P PREROUTING ACCEPT
iptables -t mangle -P INPUT ACCEPT
iptables -t mangle -P FORWARD ACCEPT
iptables -t mangle -P OUTPUT ACCEPT
iptables -t mangle -P POSTROUTING ACCEPT
iptables -F
iptables -X
iptables -P FORWARD ACCEPT
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -t raw -F
iptables -t raw -X
iptables -t raw -P PREROUTING ACCEPT
iptables -t raw -P OUTPUT ACCEPT
#iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE
#iptables -A INPUT -i eth0 -p tcp --dport 443 -j ACCEPT
iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o ens33 -j MASQUERADE
iptables -A INPUT -i ens33 -p tcp --dport 443 -j ACCEPT
service iptables save
service iptables restart
systemctl -f enable iptables
iptables -L -n --line-numbers
}
packages
EasyRSA
server
client
iptables
